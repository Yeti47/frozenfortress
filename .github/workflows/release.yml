name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      tag_name:
        description: 'Tag name (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="${{ github.event.inputs.tag_name }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG_NAME=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Tag: $TAG_NAME"
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          libtesseract-dev \
          libleptonica-dev \
          tesseract-ocr-eng \
          redis-server \
          zip
    
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        sudo systemctl enable redis-server
    
    - name: Verify dependencies
      run: |
        echo "Go version: $(go version)"
        echo "Tesseract version: $(tesseract --version)"
        echo "Redis status: $(redis-cli ping)"
        echo "Available Tesseract languages: $(tesseract --list-langs)"
    
    - name: Make scripts executable
      run: |
        chmod +x ./build-all.sh
        chmod +x ./clean.sh
        chmod +x ./release-linux.sh
        chmod +x ./ff-setup.sh
    
    - name: Check if release already exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if a release already exists for this tag
        if gh release view "${{ steps.extract_version.outputs.tag_name }}" > /dev/null 2>&1; then
          echo "Release already exists for tag ${{ steps.extract_version.outputs.tag_name }}"
          echo "This probably means the release was created via GitHub web interface."
          echo "Skipping automatic release creation."
          echo "skip_release=true" >> $GITHUB_OUTPUT
        else
          echo "No existing release found. Proceeding with automatic release creation."
          echo "skip_release=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release
      if: steps.check_release.outputs.skip_release == 'false'
      run: |
        ./release-linux.sh --arch amd64 --version ${{ steps.extract_version.outputs.version }}
    
    - name: Find release files
      if: steps.check_release.outputs.skip_release == 'false'
      id: find_files
      run: |
        # Find the main release zip file
        RELEASE_ZIP=$(find releases/ -name "frozenfortress-release-linux-amd64-v${{ steps.extract_version.outputs.version }}.zip" | head -1)
        if [ -z "$RELEASE_ZIP" ]; then
          echo "Error: Release ZIP file not found"
          ls -la releases/
          exit 1
        fi
        echo "release_zip=$RELEASE_ZIP" >> $GITHUB_OUTPUT
        echo "release_name=$(basename $RELEASE_ZIP .zip)" >> $GITHUB_OUTPUT
        echo "Found release file: $RELEASE_ZIP"
    
    - name: Create GitHub Release
      if: steps.check_release.outputs.skip_release == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## Frozen Fortress v${{ steps.extract_version.outputs.version }}
        
        **Release Information:**
        - **Platform:** Linux
        - **Architecture:** AMD64
        - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Commit:** ${{ github.sha }}
        
        **Features:**
        - ✅ Tesseract OCR support enabled
        - ✅ Redis/Valkey support
        - ✅ CLI and WebUI applications
        - ✅ Automated setup script included
        
        **Installation:**
        1. Download and extract the release archive
        2. Run the setup script: `./ff-setup.sh`
        3. Or manually install dependencies and run `./ffcli setup`
        
        **Contents:**
        - `frozenfortress-linux-amd64-v${{ steps.extract_version.outputs.version }}.zip` - Application binaries and assets
        - `ff-setup.sh` - Automated setup script
        - `README.txt` - Installation and usage instructions
        
        **Requirements:**
        - Linux AMD64 system
        - Tesseract OCR (installed automatically by setup script)
        - Redis server (installed automatically by setup script)
        
        For more information, visit the [project repository](https://github.com/${{ github.repository }}).
        EOF
        
        # Create release using GitHub CLI
        gh release create "${{ steps.extract_version.outputs.tag_name }}" \
          "${{ steps.find_files.outputs.release_zip }}" \
          --title "Frozen Fortress v${{ steps.extract_version.outputs.version }}" \
          --notes-file release_notes.md
        
        echo "Release created successfully!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.extract_version.outputs.tag_name }}"
        echo "Release file: ${{ steps.find_files.outputs.release_zip }}"
        echo "File size: $(du -h ${{ steps.find_files.outputs.release_zip }} | cut -f1)"
